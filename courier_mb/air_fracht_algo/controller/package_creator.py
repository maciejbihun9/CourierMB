from random import randint

from numpy import *

from courier_mb.models import Package
from courier_mb.models import PackageType


# VERIFIED
class PackageCreator(object):
    """
    Package Creator job is to create packages with given
    propability distribution.
    """
    @staticmethod
    def create_random_package(airports):
        """
        :param airports: List of airports in context
        :return: Package with weight generated by normal dist generator
        where weight can vary between 5 - 15 Kg.
        Airport dest and post are generated by even propability generator.
        """
        rand_weight = random.normal(10, 3, 1)[0]
        rand_weight = round(rand_weight, 2)
        while rand_weight < 5 and rand_weight > 15:
            rand_weight = random.normal(10, 3, 1)[0]

        airports_size = len(airports)
        rand_airport_dest = airports[randint(0, airports_size - 1)]
        rand_airport_post = airports[randint(0, airports_size - 1)]
        # be sure that post and dest airports are different
        package_type = PackageType.objects.get(id=1)
        while rand_airport_post.get_name() == rand_airport_dest.get_name():
            rand_airport_dest = airports[randint(0, airports_size - 1)]
            rand_airport_post = airports[randint(0, airports_size - 1)]
        package = Package(weight = rand_weight, post_air_port = rand_airport_post, dest_air_port = rand_airport_dest,
                          contents = "content", package_type = package_type, status=Package.WAITING)
        return package

    @staticmethod
    def create_random_packages(airports, number: int):
        """
        :param airports: List of context airports
        :param number: Amount of packages to create
        :return: List of packages
        """
        random_packages = []
        for i in range(number):
            random_packages.append(PackageCreator.create_random_package(airports))
        return random_packages
